// Computer problem series #1: Fill the Hard Disk Drive
// Your task is to determine how many files of the copy queue you will be able to save into your Hard Disk Drive. The files must be saved in the order they appear in the queue.

// Input:
// Array of file sizes (0 <= s <= 100)
// Capacity of the HD (0 <= c <= 500)
// Output:
// Number of files that can be fully saved in the HD.
// Examples:
// save([4,4,4,3,3], 12) -> 3
// # 4+4+4 <= 12, but 4+4+4+3 > 12
// save([4,4,4,3,3], 11) -> 2
// # 4+4 <= 11, but 4+4+4 > 11
// Do not expect any negative or invalid inputs.
function save(sizes, hd) {
	const numbers = sizes.reduce((sum, curr) => {
		if (sum.reduce((a, b) => a + b, 0) < hd) {
			sum.push(curr);
		}
		return sum;
	}, []);
	return numbers.reduce((a, b) => a + b, 0) <= hd
		? numbers.length
		: numbers.slice(0, numbers.length - 1).length;
	// let total = 0
	// let count = 0
	// for (let file of sizes) {
	//   if ((total + file) <= hd) {
	//     total += file
	//     count++
	//   } else {
	//     return count
	//   }
	// }
	// return count
}
console.log(save([4, 4, 4, 3, 3], 12)); // 3
console.log(save([4, 4, 4, 3, 3], 11)); // 2

// Strings

// Coloured Triangles
// If you finish this kata, you can try Insane Coloured Triangles by Bubbler, which is a much harder version of this one.

// A coloured triangle is created from a row of colors, each of which is red, green or blue. Successive rows, each containing one fewer color than the last, are generated by considering the two touching colors in the previous row. If these colors are identical, the same color is used in the new row. If they are different, the missing color is used in the new row. This is continued until the final row, with only a single color, is generated.

// The different possibilities are:

// Color here:        G G        B G        R G        B R
// Becomes color:      G          R          B          G
// With a bigger example:

// R R G B R G B B
//  R B R G B R B
//   G G B R G G
//    G R G B G
//     B B R R
//      B G R
//       R B
//        G
// You will be given the first row of the triangle as a string and its your job to return the final color which would appear in the bottom row as a string. In the case of the example above, you would the given RRGBRGBB you should return G.

// The input string will only contain the uppercase letters R, G, B and there will be at least one letter so you do not have to test for invalid input.
// If you are only given one color as the input, return that color.
// Adapted from the 2017 British Informatics Olympiad
function triangle(row) {
	if (row.length === 1) return row;
	const rgb = row.split('').reduce((acc, curr, i, arr) => {
		if (
			(arr[i + 1] === 'B' && curr === 'G') ||
			(arr[i + 1] === 'G' && curr === 'B')
		) {
			acc.push('R');
		} else if (
			(arr[i + 1] === 'R' && curr === 'G') ||
			(arr[i + 1] === 'G' && curr === 'R')
		) {
			acc.push('B');
		} else if (
			(arr[i + 1] === 'B' && curr === 'R') ||
			(arr[i + 1] === 'R' && curr === 'B')
		) {
			acc.push('G');
		} else if (arr[i + 1] === curr) {
			acc.push(curr);
		}
		return acc;
	}, []);
	return rgb.length > 1 ? triangle(rgb.join('')) : rgb.join('');
}
console.log(triangle('GB')); // 'R'
console.log(triangle('RRR')); // 'R'
console.log(triangle('RGBG')); // 'B'
console.log(triangle('RBRGBRB')); // 'G'
console.log(triangle('RBRGBRBGGRRRBGBBBGG')); // 'G'
console.log(triangle('B')); // 'B'
